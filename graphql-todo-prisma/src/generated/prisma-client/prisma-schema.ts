// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateToDoMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createToDoMessage(data: ToDoMessageCreateInput!): ToDoMessage!
  updateToDoMessage(data: ToDoMessageUpdateInput!, where: ToDoMessageWhereUniqueInput!): ToDoMessage
  updateManyToDoMessages(data: ToDoMessageUpdateManyMutationInput!, where: ToDoMessageWhereInput): BatchPayload!
  upsertToDoMessage(where: ToDoMessageWhereUniqueInput!, create: ToDoMessageCreateInput!, update: ToDoMessageUpdateInput!): ToDoMessage!
  deleteToDoMessage(where: ToDoMessageWhereUniqueInput!): ToDoMessage
  deleteManyToDoMessages(where: ToDoMessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  toDoMessage(where: ToDoMessageWhereUniqueInput!): ToDoMessage
  toDoMessages(where: ToDoMessageWhereInput, orderBy: ToDoMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToDoMessage]!
  toDoMessagesConnection(where: ToDoMessageWhereInput, orderBy: ToDoMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToDoMessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  toDoMessage(where: ToDoMessageSubscriptionWhereInput): ToDoMessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type ToDoMessage {
  id: ID!
  description: String
  status: String
  user: User!
  createdAt: DateTime!
}

type ToDoMessageConnection {
  pageInfo: PageInfo!
  edges: [ToDoMessageEdge]!
  aggregate: AggregateToDoMessage!
}

input ToDoMessageCreateInput {
  id: ID
  description: String
  status: String
  user: UserCreateOneWithoutToDoMessagesInput!
}

input ToDoMessageCreateManyWithoutUserInput {
  create: [ToDoMessageCreateWithoutUserInput!]
  connect: [ToDoMessageWhereUniqueInput!]
}

input ToDoMessageCreateWithoutUserInput {
  id: ID
  description: String
  status: String
}

type ToDoMessageEdge {
  node: ToDoMessage!
  cursor: String!
}

enum ToDoMessageOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
}

type ToDoMessagePreviousValues {
  id: ID!
  description: String
  status: String
  createdAt: DateTime!
}

input ToDoMessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ToDoMessageScalarWhereInput!]
  OR: [ToDoMessageScalarWhereInput!]
  NOT: [ToDoMessageScalarWhereInput!]
}

type ToDoMessageSubscriptionPayload {
  mutation: MutationType!
  node: ToDoMessage
  updatedFields: [String!]
  previousValues: ToDoMessagePreviousValues
}

input ToDoMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ToDoMessageWhereInput
  AND: [ToDoMessageSubscriptionWhereInput!]
  OR: [ToDoMessageSubscriptionWhereInput!]
  NOT: [ToDoMessageSubscriptionWhereInput!]
}

input ToDoMessageUpdateInput {
  description: String
  status: String
  user: UserUpdateOneRequiredWithoutToDoMessagesInput
}

input ToDoMessageUpdateManyDataInput {
  description: String
  status: String
}

input ToDoMessageUpdateManyMutationInput {
  description: String
  status: String
}

input ToDoMessageUpdateManyWithoutUserInput {
  create: [ToDoMessageCreateWithoutUserInput!]
  delete: [ToDoMessageWhereUniqueInput!]
  connect: [ToDoMessageWhereUniqueInput!]
  set: [ToDoMessageWhereUniqueInput!]
  disconnect: [ToDoMessageWhereUniqueInput!]
  update: [ToDoMessageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ToDoMessageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ToDoMessageScalarWhereInput!]
  updateMany: [ToDoMessageUpdateManyWithWhereNestedInput!]
}

input ToDoMessageUpdateManyWithWhereNestedInput {
  where: ToDoMessageScalarWhereInput!
  data: ToDoMessageUpdateManyDataInput!
}

input ToDoMessageUpdateWithoutUserDataInput {
  description: String
  status: String
}

input ToDoMessageUpdateWithWhereUniqueWithoutUserInput {
  where: ToDoMessageWhereUniqueInput!
  data: ToDoMessageUpdateWithoutUserDataInput!
}

input ToDoMessageUpsertWithWhereUniqueWithoutUserInput {
  where: ToDoMessageWhereUniqueInput!
  update: ToDoMessageUpdateWithoutUserDataInput!
  create: ToDoMessageCreateWithoutUserInput!
}

input ToDoMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ToDoMessageWhereInput!]
  OR: [ToDoMessageWhereInput!]
  NOT: [ToDoMessageWhereInput!]
}

input ToDoMessageWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String
  email: String!
  password: String!
  toDoMessages(where: ToDoMessageWhereInput, orderBy: ToDoMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToDoMessage!]
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  password: String!
  toDoMessages: ToDoMessageCreateManyWithoutUserInput
}

input UserCreateOneWithoutToDoMessagesInput {
  create: UserCreateWithoutToDoMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutToDoMessagesInput {
  id: ID
  name: String
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  password: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  toDoMessages: ToDoMessageUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutToDoMessagesInput {
  create: UserCreateWithoutToDoMessagesInput
  update: UserUpdateWithoutToDoMessagesDataInput
  upsert: UserUpsertWithoutToDoMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutToDoMessagesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutToDoMessagesInput {
  update: UserUpdateWithoutToDoMessagesDataInput!
  create: UserCreateWithoutToDoMessagesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  toDoMessages_every: ToDoMessageWhereInput
  toDoMessages_some: ToDoMessageWhereInput
  toDoMessages_none: ToDoMessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`